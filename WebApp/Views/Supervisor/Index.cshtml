
@using GlobalResources;
@using Microsoft.Azure.IoTSuite.Connectedfactory.WebApp.Models
@using Microsoft.Azure.IoTSuite.Connectedfactory.WebApp.Security

@model OpcSessionModel

<div class="container-fluid browser_connect_container">
    <div class="row browser_connect_header">
        <div class="browser_connect_header_text overflow">@Strings.SupervisorSelect</div>
    </div>
    <div class="row browser_top_container scrollbar-inner">
        <div id="partial" class="col-xs-12 col-sm-12 col-md-7 col-lg-7">
            @{
                Html.RenderPartial("_SupervisorList", Model);
            }
            <div class="row browser_browse_disconnect_button">
                @Html.ActionLink(@Strings.ButtonBack, "Index", "Dashboard", null, new { @class = "btn btn-default btn_browser", @role = "button" })
            </div>
        </div>
        <div id="browserImage" class="browser_image_container  col-xs-12 col-sm-12 col-md-5 col-lg-5">
            <img aria-label="image" class="img-responsive" src="~/Content/img/packing_station.png" />
        </div>
    </div>

    <div id="contextpanel" class="overlay">
        <a aria-label="closePanel" href="#" class="closebtn" onclick="closContextPanel();" role="button"><img aria-label="closePanelIcon" class="dashboard-cancel-icon" src="~/Content/img/cancel.svg" hidden></a>

        <div id="errorContextPanel" class="overlay-content">
            <div class="browser_error_contextpanel_container">
                <span class="browser_error_contextpanel_header">@Strings.BrowserErrorMessage</span>
                <div id="errorHeader" class="browser_error_contextpanel_message"></div>
            </div>
        </div>
    </div>

    <div id="scanContextPanel" class="overlay">
        <div class="overlay-scroll scrollbar-macosx">
            <div class="dashboard_contextpanel_header">
                <div class="dashboard_contextpanel_header_text">@Strings.ScanHeader</div>
            </div>
            <a aria-label="closePanel" href="#" class="closebtn" onclick="$('#scanContextPanel').addClass('overlay-close')"><img aria-label="closePanelIcon" class="dashboard-cancel-icon" src="~/Content/img/cancel.svg"></a>

            <div class="overlay-content list-group">
                <div class="list-group-item text-left list-group-item-heading">
                    <b>@Strings.ScanMessage1</b>
                    <br><b>@Strings.ScanMessage2</b>
                </div>
                <hr />
                <div class="list-group-item text-left">
                    <form class="form-inline" role="form" id="variableWrite">
                        <div class="form-group context-panel-data">
                            <label>
                                @Strings.ScanLabel (
                            <a style="display:inline" target="_blank" class="dashboard_link" href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">CIDR notation</a>
                            )
                        </label><br>
                        <input aria-label="addressRange" id="ipAddressMask" type="text" class="form-control" placeholder="IP-address/netmask">
                        <div id="errorIpRange" hidden>@Strings.InvalidInput</div>
                    </div>
                    <div class="form-group context-panel-data">
                        <label>@Strings.PortRangeLabel</label><br>
                        <input aria-label="portRange" id="portRange" type="text" class="form-control" placeholder="StartPort-EndPort">
                        <div id="errorPortRange" hidden>@Strings.InvalidInput</div>
                    </div>
                    <hr />
                    <div class="node-contextPanel-button-position">
                        <button onclick="apply()" type="button" class="btn btn-default btn_browser_contextpanel">@Strings.FilterApply</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

</div>

<script type="text/javascript">
    $(document).ready(function () {
        jQuery('.scrollbar-macosx').scrollbar();
        // initialize all context panels to default state closed
        $("#contextpanel").addClass("overlay-close").removeClass("overlay-right-open");
        $("#errorContextPanel").addClass("overlay-close").removeClass("overlay-right-open");
        $("#scanContextPanel").addClass("overlay-close").removeClass("overlay-right-open");

        @if (!PermsChecker.HasPermission(Permission.ControlOpcServer))
        {
           @: $(".toggle-state").prop("disabled", true);
           @: $(".toggle").css("background", "gray");
           @: $(".active-bg").css("background", "gray");
           @: $(".indicator").css("background", "darkgray");
           @: $(".label-text").css("color", "gray");
           @: $(".label").css("cursor", "default");
        }
    });

    var title = "@Strings.TitleBrowser";
    var currentSupervisor;
    var supervisors = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.supervisorList));

    function checkToggle(element, index) {
        if (element.checked == true) {
            $("#label-text" + index).html('@Strings.ScanToggleOn');
            currentSupervisor = index;
            setScanSupervisor(element.value, element.checked, supervisors[index]);
        } else {
            $("#label-text" + index).html('@Strings.ScanToggleOff');
            setScanSupervisor(element.value, element.checked, supervisors[index]);
        }
    }

    function openPanel(index) {
        currentSupervisor = index;

        if (supervisors[currentSupervisor].supervisorModel.discoveryConfig != undefined) {
            $("#ipAddressMask").attr("placeholder", supervisors[currentSupervisor].supervisorModel.discoveryConfig.addressRangesToScan);
        }

        if (supervisors[currentSupervisor].supervisorModel.discoveryConfig != undefined) {
            $("#portRange").attr("placeholder", supervisors[currentSupervisor].supervisorModel.discoveryConfig.portRangesToScan);
        }

        $("#scanContextPanel").removeClass("overlay-close").addClass("overlay-right-open");
    }

    function apply() {
        $("#errorIpRange").hide();
        $("#errorPortRange").hide();
        setScanSupervisor(supervisors[currentSupervisor].supervisorModel.id, true, supervisors[currentSupervisor]);
    }

    function isValidIpRange(input) {
        var isValid = false;
        var ipAddress = input.substring(0, input.indexOf("/"));

        if (input === "") {
            isValid = true;
        }
        else {
            isValid = /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/.test(ipAddress);
        }   
        return isValid;
    }

    function isValidPortRange(input) {
        var isValid = false;
        var portAddress1 = input.substring(0, input.indexOf("-"));
        var portAddress2 = input.substring(input.indexOf("-") + 1);

        if (input === "") {
            isValid = true;
        } else {
            isValid = (parseInt(portAddress1) >= 0 && parseInt(portAddress1) <= 65535) &&
                      (parseInt(portAddress2) >= 0 && parseInt(portAddress2) <= 65535);
        }
        return isValid;
    }
 
    function setScanSupervisor(supervisorId, scanStatus, supervisor) {
        var ipMask = "";
        var portRange = "";

        if ($("#scanContextPanel").hasClass("overlay-right-open")) {
            if ($("#portRange").val() === "" && supervisor.supervisorModel.discoveryConfig != undefined) {
                portRange = supervisor.supervisorModel.discoveryConfig.portRangesToScan;
            } else {
                portRange = $("#portRange").val();
            }

            if ($("#ipAddressMask").val() === "" && supervisor.supervisorModel.discoveryConfig != undefined) {
                ipMask = supervisor.supervisorModel.discoveryConfig.addressRangesToScan;
            } else {
                ipMask = $("#ipAddressMask").val();
            }

        } else {
            if (supervisor.supervisorModel.hasOwnProperty('discoveryConfig')) {
                if (supervisor.supervisorModel.discoveryConfig.hasOwnProperty('addressRangesToScan')) {
                    ipMask = supervisor.supervisorModel.discoveryConfig.addressRangesToScan;
                } else {
                    ipMask = "";
                }

                if (supervisor.supervisorModel.discoveryConfig.hasOwnProperty('portRangesToScan')) {
                    portRange = supervisor.supervisorModel.discoveryConfig.portRangesToScan;
                } else {
                    portRange = "";
                }
            }
        }

        if (isValidIpRange(ipMask) === false) {
            $("#errorIpRange").show();
            return;
        }
        if (isValidPortRange(portRange) === false) {
            $("#errorPortRange").show();
            return;
        }

        $.post({
            url: "/Supervisor/SetScanStatus",
            data: { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val(), supervisorId: supervisorId, scanStatus: scanStatus, ipMask: ipMask, portRange: portRange },
            success: function onSuccess(response) {
                $('#scanContextPanel').removeClass("overlay-right-open").addClass('overlay-close')
                setTimeout(getSupervisors, 1000);
            },
            error: function (response) {
                console.error("error setting scan status: ", response.d, response.responseText);
                onFailure(response);
            },
        });
    }

    function getSupervisors() {
        $.post({
            url: "/Supervisor/UpdateModel",
            data: { __RequestVerificationToken: $('[name=__RequestVerificationToken]').val() },
            cache: false,
            success: function onSuccess(response) {
                $("#partial").html(response);
            },
            error: function (response) {
                console.error("error getting supervisors: ", response.d, response.responseText);
                onFailure(response);
            },
        });
    }

    function onFailure(response) {
        $("#contextpanel").html("@Strings.Error");
        $("#errorContextPanel").show();
        $("#errorHeader").html(sessionModel.ErrorHeader);
        $("#errorMessage").html(sessionModel.ErrorMessage);
        $("#proceedButton").hide();
        $("#cancelButton").hide();
        $(".dashboard-cancel-icon").show();
        $(".dashboard_contextpanel_select_filter_button").css({ "margin-left": marginLeft });
    }

    function closeContextPanel(id) {
        $("#contextpanel").addClass("overlay-close").removeClass("overlay-right-open");
    }
</script>


